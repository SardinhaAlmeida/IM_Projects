<!DOCTYPE html>
<html lang="pt-PT">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controlo de Slides por Voz</title>
    <style>
        body {
            --indicator-color: black;
            background: #fff; /*radial-gradient(#fff 75%, var(--indicator-color));*/
            min-height: 100vh;
            color: burlywood;
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            text-align: center;
            padding: 20px;
        }

        .mic {
            width: 150px;
            margin: 20px auto;
        }

        .container {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            border-radius: 10px;
            background-color: #f0f0f0;
        }

        .bottomNav {
            position: absolute;
            bottom: 2%;
            width: 95%;
        }

        .recognized {
            font-size: x-large;
        }

        h1 {
            color: #4CAF50;
        }

        p {
            font-size: 1.2em;
            color: #333;
        }

        #status {
            margin-top: 20px;
            padding: 10px;
            border: 2px solid #2196F3;
            background-color: #fff;
            color: #2196F3;
            display: inline-block;
            font-size: 1em;
        }

        .responseText {
            margin-top: 20px;
            font-size: 1em;
            border: solid 2px #8ea7cf;
            margin: 2%;
            color: #4F5D73;
            border: 1px solid #ccc;
            padding: 10px;
            display: inline-block;
        }

        #version-info {
            margin-top: 10px;
            font-size: 0.9em;
            color: #666;
        }


    </style>
</head>
<body>
    <h1>Controlo de Slides por Voz</h1>
    <p>Diga "Próximo slide" ou "Slide anterior" para controlar a apresentação.</p>
    <div id="version-info">Versão do PowerPoint: Carregando...</div>
    <div id="status">Iniciando reconhecimento de voz...</div>
    <div class="responseText" id="response">Bem-vindo ao Assistente!</div>
    <div id="elapsed-time" class="responseText">Tempo decorrido: 0 segundos</div>

    <div>
        <svg class="mic" id="mic" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
            <circle cx="50" cy="50" r="32" fill="#4CAF50" />
        </svg>
    </div>

    <script>

        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'pt-PT';

        const testUtterance = new SpeechSynthesisUtterance("Teste de síntese de fala");
        testUtterance.lang = 'pt-PT';
        window.speechSynthesis.speak(testUtterance);


        const statusDiv = document.getElementById('status');
        const responseDiv = document.getElementById('response');
        const micCircle = document.querySelector('#mic circle');

        function log(message) {
            console.log(`[${new Date().toLocaleTimeString()}] ${message}`);
        }

        let isSpeaking = false;
        let cooldown = false;

        recognition.onstart = () => {
            console.log('Reconhecimento de voz iniciado.');
            statusDiv.textContent = 'Ouvindo comandos...';
            micCircle.setAttribute('fill', '#00e676');
        };

        recognition.onresult = async (event) => {
            if (isSpeaking || cooldown) {
                console.log('Ignorando comando devido ao cooldown ou fala em andamento.');
                return;
            }

            const command = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
            console.log(`[${new Date().toLocaleTimeString()}] Comando reconhecido: ${command}`);
            statusDiv.textContent = `Comando reconhecido: ${command}`;

            cooldown = true;
            setTimeout(() => (cooldown = false), 2000); // Reduzir cooldown para evitar bloqueios

            try {
                const response = await fetch('http://localhost:5005/model/parse', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: command }),
                });

                if (response.ok) {
                    const data = await response.json();
                    const intent = data.intent.name;
                    const confidence = data.intent.confidence;
                    console.log(`[${new Date().toLocaleTimeString()}] Intent: ${intent}, Confiança: ${confidence}`);

                    if (confidence < 0.4) {
                        console.log('Confiança muito baixa. Comando ignorado.');
                        return;
                    }

                    if (intent === 'fallback' || confidence < 0.6) {
                        responseDiv.textContent = 'Comando não reconhecido. Tente novamente.';
                        speak('Desculpe, não percebi o que disse. Pode repetir?');
                    } else {
                        handleIntent(intent, data.entities || []);
                    }
                } else {
                    console.error('Erro no servidor NLU.');
                    responseDiv.textContent = 'Erro ao processar o comando.';
                }
            } catch (error) {
                console.error(`Erro na comunicação com o servidor NLU: ${error}`);
                responseDiv.textContent = 'Erro na comunicação com o servidor.';
            }
        };

        function handleIntent(intent, entities) {
            switch (intent) {
                case 'next_slide':
                    sendVoiceCommand('next_slide', 'Passando para o próximo slide.');
                    break;
                case 'previous_slide':
                    sendVoiceCommand('previous_slide', 'Voltando ao slide anterior.');
                    break;
                case 'jump_to_slide_by_title':
                    const slideTitleEntity = entities.find((e) => e.entity === 'slide_title');
                    const slideTitle = slideTitleEntity ? slideTitleEntity.value.trim() : '';
                    console.log(`Slide title extracted: ${slideTitle}`);
                    if (!slideTitle) {
                        console.error('Slide title not extracted. Available entities:', entities);
                        responseDiv.textContent = 'Título do slide não fornecido.';
                    }
                    if (slideTitle) {
                        sendVoiceCommand('jump_to_slide_by_title', `Indo para o slide: ${slideTitle}`, { SlideTitle: slideTitle });
                        console.log(`Command sent for slide title: ${slideTitle}`);
                    } else {
                        console.error('Slide title not extracted or is empty.');
                        responseDiv.textContent = 'Título do slide não fornecido.';
                    }
                    break;
                case 'jump_to_slide_by_number':
                    const slideNumberEntity = entities.find((e) => e.entity === 'slide_number')?.value || '';
                    const slideNumber = parseInt(slideNumberEntity, 10);
                    if (slideNumber) {
                        sendVoiceCommand('jump_to_slide_by_number', `Indo para o slide: ${slideNumber}`, { SlideNumber: `${slideNumber}` });
                    } else {
                        responseDiv.textContent = 'Número do slide não fornecido.';
                    }
                case "highlight_phrase":
                    const phrase = entities.find((e) => e.entity === "phrase")?.value || "";
                    if (phrase) {
                        sendVoiceCommand("highlight_phrase", `Sublinhando a frase: ${phrase}`, { Phrase: phrase });
                    } else {
                        responseDiv.textContent = "Frase não fornecida.";
                    }
                    break;
                case "zoom_in":
                    sendVoiceCommand("zoom_in", "Aumentando o zoom e focando na imagem.");
                    break;

                case "zoom_out":
                    sendVoiceCommand("zoom_out", "Reduzindo o zoom no slide.");
                    break;

                case "show_elapsed_time":
                    sendVoiceCommand("show_elapsed_time", "A mostrar o tempo decorrido desde o início da apresentação.");
                    break;

                case 'play_video':
                    console.log("Tentando iniciar reprodução do vídeo.");
                    sendVoiceCommand('play_video', 'Reproduzindo o vídeo.');
                    break;

                case 'pause_video':
                    console.log("Tentando pausar o vídeo.");
                    sendVoiceCommand('pause_video', 'Pausando o vídeo.');
                    break;

                case 'stop_video':
                    sendVoiceCommand('stop_video', 'Parando o vídeo.');
                    break;

                case 'fast_forward_video':
                    const forwardSecondsEntity = entities.find((e) => e.entity === 'seconds');
                    const forwardSeconds = forwardSecondsEntity ? parseInt(forwardSecondsEntity.value, 10) : 10;
                    if (!isNaN(forwardSeconds) && forwardSeconds > 0) {
                        sendVoiceCommand('fast_forward_video', `Avançando ${forwardSeconds} segundos no vídeo.`, { Seconds: forwardSeconds });
                    } else {
                        responseDiv.textContent = 'Valor inválido para avanço no vídeo.';
                        speak('Desculpe, não consegui identificar o tempo para avançar. Pode repetir?');
                    }
                    break;

                case 'rewind_video':
                    const rewindSecondsEntity = entities.find((e) => e.entity === 'seconds');
                    const rewindSeconds = rewindSecondsEntity ? parseInt(rewindSecondsEntity.value, 10) : 10;
                    if (!isNaN(rewindSeconds) && rewindSeconds > 0) {
                        sendVoiceCommand('rewind_video', `Retrocedendo ${rewindSeconds} segundos no vídeo.`, { Seconds: rewindSeconds });
                    } else {
                        responseDiv.textContent = 'Valor inválido para retroceder no vídeo.';
                        speak('Desculpe, não consegui identificar o tempo para retroceder. Pode repetir?');
                    }
                    break;

                case 'current_slide':
                    sendVoiceCommand('current_slide', 'Vou verificar o slide atual.');
                    break;

                case 'restart_presentation':
                    sendVoiceCommand('restart_presentation', 'A apresentação será reiniciada.');
                    break;

                case 'start_timer':
                    sendVoiceCommand('start_timer', 'Temporizador iniciado.');
                    break;

                case 'stop_timer':
                    sendVoiceCommand('stop_timer', 'Temporizador parado.');
                    break;

                case 'helper':
                    sendVoiceCommand('helper', 'A mostrar os comandos disponíveis.');
                    break;

                case 'greet':
                    sendVoiceCommand('greet', 'Olá! Como posso ajudar hoje?');
                    break;
                case 'ask_how_are_you':
                    sendVoiceCommand('ask_how_are_you', 'Estou ótimo, obrigado por perguntar! Como está você?');
                    break;
                case 'respond_how_am_i':
                    sendVoiceCommand('respond_how_am_i', 'Que bom ouvir isso! Estou aqui para o que precisar.');
                    break;

                default:
                    responseDiv.textContent = 'Comando não reconhecido.';
                    speak('Desculpe, não entendi o comando. Pode repetir?');
                    console.warn(`Intent não reconhecido: ${intent}`);
            }
        }

        recognition.onerror = (event) => {
            console.error('Erro no reconhecimento de voz:', event.error);
            statusDiv.textContent = `Erro no reconhecimento de voz: ${event.error}`;
            micCircle.setAttribute('fill', '#ff5252');
        };

        recognition.onend = () => {
            console.log('Reconhecimento de voz finalizado. Reiniciando...');
            statusDiv.textContent = 'Reconhecimento de voz finalizado. Reiniciando...';
            setTimeout(() => recognition.start(), 500); // Pequeno atraso para reiniciar
        };

        // Inicializar WebSocket
        let socket;

        function initializeWebSocket() {
            socket = new WebSocket('ws://localhost:5000/');

            socket.onopen = () => {
                console.log('WebSocket conectado.');
            };

            socket.onmessage = (event) => {
                console.log('Resposta do servidor WebSocket:', event.data);

                try {
                    const response = JSON.parse(event.data);
                    if (response.Intent === "show_elapsed_time") {
                        document.getElementById('elapsed-time').textContent = `Tempo decorrido: ${response.Message}`;
                    } else {
                        responseDiv.textContent = response.Message;
                    }
                } catch (error) {
                    console.error("Erro ao processar a resposta do WebSocket como JSON. Tratando como texto simples.");
                    document.getElementById('elapsed-time').textContent = "Erro ao obter o tempo decorrido.";
                    responseDiv.textContent = event.data;
                }
            };

            socket.onerror = (error) => {
                console.error('Erro no WebSocket:', error);
            };

            socket.onclose = () => {
                console.log('WebSocket desconectado. Tentando reconectar em 5 segundos...');
                setTimeout(initializeWebSocket, 5000); // Tenta reconectar
            };
        }

        function sendVoiceCommand(intent, feedback, additionalData = {}) {
            if (socket && socket.readyState === WebSocket.OPEN) {
                const message = JSON.stringify({ Intent: intent, ...additionalData });
                console.log(`Payload sent to WebSocket: ${message}`); // Debug log
                socket.send(message);
                console.log(`Comando enviado: ${intent}`);
                responseDiv.textContent = feedback;
                speak(feedback);
            } else {
                console.error('WebSocket não está conectado.');
                responseDiv.textContent = 'Erro: WebSocket desconectado.';
            }
        }

        function speak(text) {
            console.log(`Attempting to speak: ${text}`); // Debug log
            if ('speechSynthesis' in window) {
                const msg = new SpeechSynthesisUtterance(text);
                msg.lang = 'pt-PT'; // Adjust the language code as needed
                msg.onend = () => {
                    console.log('Resposta falada concluída.');
                };
                window.speechSynthesis.speak(msg);
                console.log(`Resposta falada: ${text}`);
            } else {
                console.error('SpeechSynthesis não é suportado neste navegador.');
                responseDiv.textContent = 'Erro ao fornecer feedback auditivo.';
            }
        }


        // Initialize WebSocket
        initializeWebSocket();

        recognition.start(); // Start listening for commands
    </script>
</body>
</html>
